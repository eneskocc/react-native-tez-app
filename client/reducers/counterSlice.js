import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCount } from "./counterAPI";

const initialState = {
  value: 0,
  obje: [],
  token: null,
  user:null,
  favorite: [],
  photos: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state, action) => {
      state.token=(action.payload);
    },
    incrementUser: (state, action) => {
      state.token=(action.payload);
    },
    decrement: (state, action) => {
      const removeIndex = state.obje.findIndex(
        (item) => item.id === action.payload.id
      );
      let obj = state.obje[removeIndex];
      if (obj.number === 1) {
        console.log(obj.number);
        state.obje.splice(removeIndex, 1);
      } else {
        state.obje.splice(removeIndex, 1);
        state.obje.push({ ...action.payload, number: obj.number - 1 });
      }
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      const removeIndex = state.obje.findIndex(
        (item) => item.id === action.payload.id
      );

      if (removeIndex === -1) {
        state.obje.push(action.payload);
      } else {
        let obj = state.obje[removeIndex];
        state.obje.splice(removeIndex, 1);
        state.obje.push({ ...action.payload, number: obj.number + 1 });
      }
    },
    decrementFAV: (state, action) => {
      const removeIndex = state.favorite.findIndex(
        (item) => item.id === action.payload.id
      );
      let obj = state.favorite[removeIndex];
      if (obj.number === 1) {
        console.log(obj.number);
        state.favorite.splice(removeIndex, 1);
      } else {
        state.favorite.splice(removeIndex, 1);
        state.favorite.push({ ...action.payload, number: obj.number - 1 });
      }
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementFAV: (state, action) => {
      const removeIndex = state.favorite.findIndex(
        (item) => item.id === action.payload.id
      );

      if (removeIndex === -1) {
        state.favorite.push(action.payload);
      } else {
        let obj = state.favorite[removeIndex];
        state.favorite.splice(removeIndex, 1);
        state.favorite.push({ ...action.payload, number: obj.number + 1 });
      }
    },
    incrementPhoto: (state, action) => {
      state.photos.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
        state.obje.push(action.payload);
      });
  },
});

export const {
  increment,
  decrement,
  incrementFAV,
  decrementFAV,
  incrementByAmount,
  incrementPhoto,
  incrementUser,
} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;
export const selectLogin = (state) => state.counter.token;
export const selectUser = (state) => state.counter.user;
export const selectObje = (state) => state.counter.obje;
export const selectFavorite = (state) => state.counter.favorite;
export const selectPhotos = (state) => state.counter.photos;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
